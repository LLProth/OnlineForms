@model OnlineForms.ViewModels.ESCRFViewModel
@{
    ViewBag.FormInfo = new Dictionary<string, string>();
    ViewBag.FormInfo.Add("FormName", "Employee Status Change Request Form");
    ViewBag.FormInfo.Add("Division", "Human Resource Division");
    ViewBag.FormInfo.Add("Info", "Change Print");
}

@section topHeader {
    @Html.Partial("~/Views/Shared/_ESCRFHeader.cshtml", (Dictionary<string, string>)ViewBag.FormInfo)
}

<div>
    <div class="row mb-5 formRow">
        <div class="form-group col-6 form-floating">
            @Html.EditorFor(m => m.Change.EmployeeName, new { htmlAttributes = new { @class = "form-control fw-bold w-100", @placeholder = Html.DisplayNameFor(m => m.Change.EmployeeName), @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.EmployeeName, htmlAttributes: new { @class = "fw-bold" })
        </div>
        <div class="form-group col-4 form-floating">
            @Html.EditorFor(m => m.Change.PhoneNumber, new { htmlAttributes = new { @class = "form-control fw-bold", @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.PhoneNumber, htmlAttributes: new { @class = "fw-bold" })
        </div>
    </div>
    <div class="row mb-5 formRow">
        <div class="form-group col-4 form-floating">
            @Html.EditorFor(m => m.Change.Department, new { htmlAttributes = new { @class = "form-control fw-bold", @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.Department, htmlAttributes: new { @class = "fw-bold" })
        </div>
        <div class="form-group col-4 form-floating">
            @Html.EditorFor(m => m.Change.OfficeLocation, new { htmlAttributes = new { @class = "form-control fw-bold", @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.OfficeLocation, htmlAttributes: new { @class = "fw-bold" })
        </div>
        <div class="form-group col-4 form-floating">
            @Html.EditorFor(m => m.Change.CurrentSupervisor, new { htmlAttributes = new { @class = "form-control fw-bold", @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.CurrentSupervisor, htmlAttributes: new { @class = "fw-bold" })
        </div>
    </div>
    <div class="row mb-5 formRow justify-content-start">
        <div class="form-group col-6">
            @Html.CheckBoxFor(m => m.Change.IsNewPosition, new { @id = "check-new-position", @disabled = "disabled" })
            @Html.LabelFor(m => m.Change.IsNewPosition, htmlAttributes: new { @class = "fw-bold" })
            @Html.ValidationMessageFor(m => m.Change.IsNewPosition)
        </div>
        @if (Model.Change.IsNewPosition)
        {
            <div class="form-group col-6 form-floating" id="input-new-supervisor">
                @Html.EditorFor(m => m.Change.PositionName, new { htmlAttributes = new { @class = "form-control fw-bold Validation2", @placeholder = Html.DisplayNameFor(m => m.Change.PositionName), @maxlength = "100", @list = "names1", @readonly = "readonly" } })
                @Html.LabelFor(m => m.Change.PositionName, htmlAttributes: new { @class = "fw-bold" })
                @Html.ValidationMessageFor(m => m.Change.PositionName, "", new { @class = "validationText" })
            </div>
        }

    </div>
    <div class="row mb-5 formRow justify-content-start">
        <div class="form-group col-6">
            @Html.CheckBoxFor(m => m.Change.IsNewSupervisor, new { @id = "check-new-position", @disabled = "disabled" })
            @Html.LabelFor(m => m.Change.IsNewSupervisor, htmlAttributes: new { @class = "fw-bold" })
            @Html.ValidationMessageFor(m => m.Change.IsNewSupervisor)
        </div>
        @if (Model.Change.IsNewSupervisor)
        {
            <div class="form-group col-6 form-floating" id="input-new-supervisor">
                @Html.EditorFor(m => m.Change.NewSupervisor, new { htmlAttributes = new { @class = "form-control fw-bold Validation2", @placeholder = Html.DisplayNameFor(m => m.Change.NewSupervisor), @maxlength = "100", @list = "names1", @readonly = "readonly" } })
                @Html.LabelFor(m => m.Change.NewSupervisor, htmlAttributes: new { @class = "fw-bold" })
                @Html.ValidationMessageFor(m => m.Change.NewSupervisor, "", new { @class = "validationText" })
            </div>
        }
    </div>
    <div class="row d-flex align-items-center mb-5">
        <div class="form-group col-4">
            @Html.CheckBoxFor(m => m.Change.IsTempToFte, new { @id = "check-new-position", @disabled = "disabled" })
            @Html.LabelFor(m => m.Change.IsTempToFte, htmlAttributes: new { @class = "fw-bold" })
            @Html.ValidationMessageFor(m => m.Change.IsTempToFte)
        </div>
        <div class="form-group col-4 form-floating">
            @Html.EditorFor(m => m.Change.FLSAStatus, new { htmlAttributes = new { @class = "form-control fw-bold", @placeholder = Html.DisplayNameFor(m => m.Change.FLSAStatus), @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.FLSAStatus, htmlAttributes: new { @class = "fw-bold" })
        </div>
        <div class="form-group col-4 form-floating">
            @Html.EditorFor(m => m.Change.EffectiveDate, new { htmlAttributes = new { @class = "form-control fw-bold", @Value = Model.Change.EffectiveDate.ToString("yyyy-MM-dd"), @type = "date", @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.EffectiveDate, htmlAttributes: new { @class = "fw-bold" })
        </div>
    </div>
    <div class="row mb-5">
        <div class="form-group col-12 form-floating">
            @Html.EditorFor(m => m.Change.Comments, new { htmlAttributes = new { @class = "form-control fw-bold w-100", @placeholder = Html.DisplayNameFor(m => m.Change.CurrentSupervisor), @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.Comments, htmlAttributes: new { @class = "fw-bold" })
        </div>
    </div>
    <div class="row mb-5 formRow">
        <div class="form-group col-3 form-floating">
            @Html.EditorFor(m => m.Change.ModifiedBy, new { htmlAttributes = new { @class = "form-control fw-bold w-100", @placeholder = Html.DisplayNameFor(m => m.Change.ModifiedBy), @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.ModifiedBy, htmlAttributes: new { @class = "fw-bold" })
        </div>
        <div class="form-group col-3 form-floating">
            @Html.EditorFor(m => m.Change.ChangeType, new { htmlAttributes = new { @class = "form-control fw-bold w-100", @placeholder = Html.DisplayNameFor(m => m.Change.ChangeType), @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.ChangeType, htmlAttributes: new { @class = "fw-bold" })
        </div>
        <div class="form-group col-3 form-floating">
            @Html.EditorFor(m => m.Change.CreatedDate, new { htmlAttributes = new { @class = "form-control fw-bold", @Value = Model.Change.CreatedDate.ToString("yyyy-MM-dd"), @type = "date", @readonly = "readonly" } })
            @Html.LabelFor(m => m.Change.CreatedDate, htmlAttributes: new { @class = "fw-bold" })
        </div>
    </div>
</div>
@if (Model.TaskListItemHolder.Count() != 0)
{
    @Html.HiddenFor(m => m.NewHire.ID)
    <div id="recentHeading" class="w-100">
        <h3>Changelist</h3>
    </div>
    <table class="w-50">
        <thead>
            <tr>
                <th>
                    Task:
                </th>
                <th>
                    Deputy:
                </th>
                <th>
                    Signed On:
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (OnlineForms.Models.ESCRFViewModel.TaskListItemModel taskListItem in Model.TaskListItemHolder)
            {
                <tr>
                    <td>
                        @taskListItem.Task
                    </td>
                    <td>
                        @taskListItem.Deputy
                    </td>
                    @if (taskListItem.SignedOn == DateTime.MinValue)
                    {
                        <td>
                            Not Signed
                        </td>
                    }
                    else
                    {
                        <td>
                            @taskListItem.SignedOn
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}


